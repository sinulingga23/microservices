version: "3.9"
services:
  product-service:
    container_name: product-service
    build: ./product-service
    environment:
      - PORT=8081
      - KAFKA_BROKER_ADDRESS=kafka:29092
      - MONGO_URI=mongodb://mongo:mongo123@localhost:27017/product_service/?authSource=admin&replicaSet=rs0
    ports:
      - "8081:8081"
      - "3031:3031"
    expose:
      - "8081"
      - "3031"
    depends_on:
      - "kafka"
    networks:
      - microservices
  order-service:
    container_name: order-service
    build: ./order-service
    environment:
      - PORT=8082
      - HOST_PRODUCT_SERVICE=product-service:8081
      - KAFKA_BROKER_ADDRESS=kafka:29092
    ports:
      - "8082:8082"
    expose:
      - "8082"
    depends_on:
      - "kafka"
    networks:
      - microservices
  zookeeper:
    container_name: zookeper
    image: confluentinc/cp-zookeeper:7.1.6
    ports:
      - "22181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - microservices
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.3.2
    ports: 
      - "29092:29092"
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INNER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSET_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - microservices
  nginx:
    container_name: nginx
    image: nginx:1.23.3
    ports:
      - "80:80"
    volumes:
      - nginx_log_microservices:/var/log/nginx/
      - ./default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - "product-service"
      - "order-service"
    networks:
      - microservices
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.37.6
    ports:
      - "9090:9090"
    expose:
      - "9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - "product-service"
      - "order-service"
    networks:
      - microservices
  mongo1:
    container_name: mongo1
    image: mongo:7
    ports:
      - "30001:27017"
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]
    networks:
      - microservices
  mongo2:
    container_name: mongo2
    image: mongo:7
    ports:
      - "30002:27017"
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]
    networks:
      - microservices
  mongo3:
    container_name: mongo3
    image: mongo:7
    ports:
      - "30003:27017"
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]
    networks:
      - microservices
  mongo:
    container_name: mongo
    image: mongo:7
    # command: mongod --config /etc/mongod.conf --keyFile /etc/keyfile_mongo.txt
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    # environment:
    #   - MONGO_INITDB_ROOT_USERNAME=mongo
    #   - MONGO_INITDB_ROOT_PASSWORD=mongo123
    # ports:
    #   - "27017:27017"
    networks:
      - microservices
    volumes:
      - ./initiate_replica.sh:/initiate_replica.sh
    #   - ./mongod.conf:/etc/mongod.conf
    #   - ./keyfile_mongo.txt:/etc/keyfile_mongo.txt
    #   - ./mongod.log:/var/log/mongodb/mongod.log
      # - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    entrypoint:
      - ./initiate_replica.sh
    

volumes:
  nginx_log_microservices:
    driver: local

networks:
  microservices: